*************************************************************************
Configuration: 
	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
	</dependency>

Default user name : user
password: (while project started generates the one)

Overiding the default user name and passwrod: 
spring.security.user.name=admin
spring.security.user.password=admin

*************************************************************************	

Using in memory authentication to configure users:

@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication().withUser("gopi").password("{noop}gopi").roles("USER").and().withUser("admin")
				.password("{noop}admin").roles("ADMIN");
}

Configuring the roles: 

@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers("/v1/admins/**").hasAnyRole("ADMIN").antMatchers("/v1/users/**")
				.hasAnyRole("USER", "ADMIN").antMatchers("/v1/quotes/**").permitAll().and().httpBasic();
}

**************************************************************************************************************

Configuring users from database: 

**************************************************************************************************************
	//Inject the datasource object
	@Autowired
	DataSource dataSource;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		//Attach datasource to the jdbc
		auth.jdbcAuthentication().dataSource(dataSource);
	}

Default schema created by spring-security: 

CREATE TABLE users (
  username VARCHAR(50) NOT NULL,
  password VARCHAR(100) NOT NULL,
  enabled TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (username)
);
   
CREATE TABLE authorities (
  username VARCHAR(50) NOT NULL,
  authority VARCHAR(50) NOT NULL,
  FOREIGN KEY (username) REFERENCES users(username)
);
 
CREATE UNIQUE INDEX ix_auth_username
  on authorities (username,authority);
  
Inserting users: 

INSERT INTO users (username, password, enabled)
  values ('user','user',1);

INSERT INTO users (username, password, enabled)
  values ('admin','admin',1);


INSERT INTO authorities (username, authority)
  values ('admin', 'ROLE_ADMIN');

INSERT INTO authorities (username, authority)
  values ('user', 'ROLE_USER');

When we are using plain text use we need to configure these bean 

	@Bean
	public PasswordEncoder getPasswordEncpder() {
		return NoOpPasswordEncoder.getInstance();
	}

***************************************************************************	
if we want to use different schema than provided by spring security then 
do this configuration

public void configure(AuthenticationManagerBuilder auth) 
  throws Exception {
    auth.jdbcAuthentication()
      .dataSource(dataSource)
      .usersByUsernameQuery("select email,password,enabled "
        + "from bael_users "
        + "where email = ?")
      .authoritiesByUsernameQuery("select email,authority "
        + "from authorities "
        + "where email = ?");
}
**************************************************************************
Instead of hard code the password. Use hashing technique

@Bean
public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
}

to get hashed value of Password. Use this api

curl -X GET \
  http://localhost:8080/v1/quotes/hashMe/admin
  
**************************************************************************

Creating the our own UserServiceImplementation to validate the users

1) Create a class MyUser (it is your own entity)
2) Password stored with hashing in database

User class:

@Entity
public class MyUser {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	private String userName;

	private String password;

	private String authorities;

	public MyUser() {

	}

	public MyUser(String userName, String password, String authorities) {
		this.userName = userName;
		this.password = password;
		this.authorities = authorities;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public void setAuthorities(String authorities) {
		this.authorities = authorities;
	}

	public String getPassword() {
		return password;
	}

	public String getAuthorities() {
		return authorities;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

}

UserDetailsServiceImpl: 
***********************

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

	@Autowired
	UserPrinciplalRepository userPrincipalRepository;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		System.out.println("In side the UserDetailsServiceImpl");
		MyUser user = userPrincipalRepository.findByUserName(username);
		String auths1 = user.getAuthorities();
		String auths[] = auths1.split(",");
		List<SimpleGrantedAuthority> authorities = new ArrayList<SimpleGrantedAuthority>();
		for (String a : auths) {
			SimpleGrantedAuthority s = new SimpleGrantedAuthority(a.trim());
			authorities.add(s);
		}
		User user1 = new User(username, user.getPassword(), authorities);
		return user1;
	}

}

UserRepository:


public interface UserPrinciplalRepository extends JpaRepository<MyUser, Integer> {

	public MyUser findByUserName(String userName);

}


Security Configuration: 

@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	DataSource dataSource;

	@Autowired
	UserDetailsServiceImpl userServiceImpl;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userServiceImpl);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers("/v1/admins/**").hasAnyRole("ADMIN").antMatchers("/v1/users/**")
				.hasAnyRole("USER", "ADMIN").antMatchers("/v1/quotes/**").permitAll().and().httpBasic();
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

}

insert into my_user (authorities,password,user_name) values ('ROLE_USER,ROLE_ADMIN','$2a$10$SjvOOhVrG/TPLsuyxOOcgeOx13m5u2TxbIHvnF7aJ7PUq.Gwvjh..','admin');

insert into my_user (authorities,password,user_name) values ('ROLE_USER,ROLE_ADMIN','$2a$10$JpZlbDfm8WSD6wpnVKB31eIvlv.3.k8iOmLYJgCyGA7/J/J9LpGJ6','gopi');



 **************************************************************
 
Encrypting the secrets from application.properties (or) application.yml file
 
Add this dependency to your pom.xml file

<dependency>
	<groupId>com.github.ulisesbocchio</groupId>
	<artifactId>jasypt-spring-boot-starter</artifactId>
	<version>2.0.0</version>
</dependency>
 
 
Encrypting the password:
 
java -cp ~/.m2/repository/org/jasypt/jasypt/1.9.2/jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input="123456" password=test algorithm=PBEWithMD5AndDES  
	
http://www.jasypt.org/general-usage.html	
	
