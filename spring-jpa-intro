*******************************************

<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>


spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
****************************************

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	
	private String name;
	
	private int age;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
	
	
}
*************************************

public interface EmployeeRepository extends JpaRepository<Employee, Integer> {

}

*****************

package com.unimoni;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Configuration;

import com.unimoni.entity.Employee;
import com.unimoni.repository.EmployeeRepository;

@Configuration
public class TestRunner implements CommandLineRunner {

	@Autowired
	EmployeeRepository employeeRepository;
	
	
	@Override
	public void run(String... args) throws Exception {
		 Optional<Employee> e = employeeRepository.findById(1);
		if(e.isPresent()) {
			System.out.println(e.get().getAge());
		}
		Employee newEmp = e.get();
		newEmp.setAge(35);
		employeeRepository.save(newEmp);
		employeeRepository.deleteById(1);
		employeeRepository.deleteAll();
	}

}

**********************************************************************************

public List<Employee> findByName(String name);
	
	public List<Employee> findByNameAndAge(String name, int age);
	
	public List<Employee> findByNameOrAge(String name, int age);
	
	public List<Employee> findByAgeBetween(int start, int end);
	
	public List<Employee> findByName(String name, Pageable page);
	
	@Query(value="select e from Employee e where e.name=:name", nativeQuery=false)
	public List<Employee> getByName(@Param("name") String name);
	
	@Query(value="select e from Employee e where e.name=:name and e.age=:age", nativeQuery=false)
	public List<Employee> getByNameAndAge(@Param("name") String name,@Param("age") Integer age);
	
	@Query(value="select new Employee(e.name,e.age) from Employee e where e.name=:name and e.age=:age", nativeQuery=false)
	public List<Employee> getByNameAndAge1(@Param("name") String name,@Param("age") Integer age);

	@Query(value="select * from employee e where e.name=:name", nativeQuery=true)
	public List<Employee> getByNameUsingNative(@Param("name") String name);
	
	@Query(value="select name,age from employee e where e.name=:name", nativeQuery=true)
	public Map getByNameUsingNative2(@Param("name") String name);

*************************************************

@Procedure(procedureName = "MOVE_TO_HISTORY")
  boolean movePersonToHistory(@Param("person_id_in") int personId);


@Modifying(clearAutomatically = true)
@Query("update RssFeedEntry feedEntry set feedEntry.read =:isRead where feedEntry.id =:entryId")
void markEntryAsRead(@Param("entryId") Long rssFeedEntryId, @Param("isRead") boolean isRead);
